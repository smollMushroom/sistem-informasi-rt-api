// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  username          String    @unique
  passwordHash      String
  role              Role
  token             String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  profile           Profile?
  posts             Post[]
  letterRequests    LetterRequest[]
}

model Profile{
  id                String    @id @default(uuid())
  fullName          String
  address           String
  birthDate         String
  birthPlace        String    @default("Bogor")
  phoneNumber       String    
  nationalId        String    
  gender            Gender
  nationality       String
  religion          Religion
  phoneNumberHash   String    @unique
  nationalIdHash    String    @unique
  meritalStatus     String
  occupation        String
  sign              String?    
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LetterRequest {
  id                String    @id @default(uuid())
  userId            String
  letterType        String      
  letterNumber      String    @default("-")
  status            RequestStatus @default(pending)
  signed            String?
  reason            String?     
  submissionDate    DateTime  @default(now())
  processedDate     DateTime?   
  pickupDate        DateTime?   
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade) 
}

model BlacklistedToken {
  id                String    @unique @default(uuid())
  token             String    @unique
  expiresAt         DateTime
  createdAt         DateTime  @default(now())
}

model Post {
  id                String    @id @default(uuid())
  title             String
  slug              String?   @unique
  thumbnail         String?    
  content           String    
  type              PostType 
  authorId          String?     
  author            User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  publishedAt       DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

enum RequestStatus {
  pending
  process
  approved
  rejected
  canceled
}

enum Role {
  warga
  admin
  ketua
}

enum Gender {
  male
  female
}

enum Religion {
  Islam
  Kristen
  Katolik
  Hindu
  Buddha
  Konghucu
}

enum PostType {
  announcement
  news
}